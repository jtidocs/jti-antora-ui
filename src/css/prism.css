div[class*='language-'],
pre[class*='language-'],
code[class*='language-'] {
  font-size: var(--prism-font-size);
  direction: ltr;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  line-height: var(--prism-line-height);
  -moz-tab-size: var(--prism-tab-size);
  -o-tab-size: var(--prism-tab-size);
  tab-size: var(--prism-tab-size);
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
  color: var(--prism-foreground) !important;
}

/* Code blocks */
div[class*='language-'],
pre[class*='language-'] {
  font-size: var(--prism-block-font-size);
  padding: var(--prism-block-padding-y) var(--prism-block-padding-x);
  margin: var(--prism-block-margin-y) var(--prism-block-margin-x);
  border-radius: var(--prism-block-radius);
  overflow: auto;
  background: var(--prism-background);
}

/* Inline code */
:not(pre) > code[class*='language-'] {
  font-size: var(--prism-inline-font-size);
  padding: var(--prism-inline-padding-y) var(--prism-inline-padding-x);
  border-radius: var(--prism-inline-radius);
  background: var(--prism-inline-background);
}

/* Selection */
pre[class*='language-']::-moz-selection,
pre[class*='language-'] ::-moz-selection,
code[class*='language-']::-moz-selection,
code[class*='language-'] ::-moz-selection {
  background: var(--prism-selection-background);
}

pre[class*='language-']::selection,
pre[class*='language-'] ::selection,
code[class*='language-']::selection,
code[class*='language-'] ::selection {
  background: var(--prism-selection-background);
}

/* Tokens */
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: var(--prism-comment);
  font-style: var(--prism-comment-style);
}

.token.namespace {
  color: var(--prism-namespace);
}

.token.interpolation {
  color: var(--prism-interpolation);
}

.token.string {
  color: var(--prism-string);
}

.token.punctuation {
  color: var(--prism-punctuation);
}

.token.operator {
  color: var(--prism-operator);
}

.token.keyword.module,
.token.keyword.control-flow {
  color: var(--prism-keyword-control);
}

.token.url,
.token.symbol,
.token.inserted {
  color: var(--prism-symbol);
}

.token.constant {
  color: var(--prism-constant);
}

.token.string.url {
  text-decoration: var(--prism-url-decoration);
}

.token.boolean,
.language-json .token.boolean {
  color: var(--prism-boolean);
}

.token.number,
.language-json .token.number {
  color: var(--prism-number);
}

.token.variable {
  color: var(--prism-variable);
}

.token.keyword {
  color: var(--prism-keyword);
}

.token.atrule,
.token.attr-value,
.token.selector {
  color: var(--prism-selector);
}

.token.function {
  color: var(--prism-function);
}

.token.deleted {
  color: var(--prism-deleted);
}

.token.important,
.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}

.token.class-name {
  color: var(--prism-class);
}

.token.tag,
.token.builtin {
  color: var(--prism-builtin);
}

.token.attr-name,
.token.property,
.token.entity {
  color: var(--prism-property);
}

.language-json .token.property {
  color: var(--prism-json-property);
}

.token.regex {
  color: var(--prism-regex);
}

.token.decorator,
.token.annotation {
  color: var(--prism-decorator);
}

/* overrides */

pre[class*="language-"] {
  padding: 0;
  margin: 1rem 0;
}

pre[class*="language-"].line-numbers {
  position: relative;
  counter-reset: linenumber;
}

pre[class*="language-"].line-numbers > code {
  position: relative;
  white-space: inherit;
  padding-left: 4.5em !important;
}

.line-numbers .line-numbers-rows {
  position: absolute;
  pointer-events: none;
  top: 0.875em;
  font-size: 100%;
  left: 0.5em;
  width: 3em; /* works for line-numbers below 1000 lines */
  letter-spacing: -1px;
  border-right: 1px solid var(--prism-line-number);
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.line-numbers-rows > span {
  display: block;
  counter-increment: linenumber;
}

.line-numbers-rows > span::before {
  content: counter(linenumber);
  color: var(--prism-line-number-gutter);
  display: block;
  padding-right: 0.8em;
  text-align: right;
}

pre[data-line] {
  position: relative;
  /* padding: 1em 0 1em 3em; */
  padding-left: 1.5em;
}

.line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 0.875em; /* Same as .prismâ€™s padding-top */
  background: hsla(24, 20%, 50%, 0.15);
  background: linear-gradient(to right, hsla(24, 20%, 50%, 0.15) 70%, hsla(24, 20%, 50%, 0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

@media print {
  .line-highlight {
    /*
     * This will prevent browsers from replacing the background color with white.
     * It's necessary because the element is layered on top of the displayed code.
     */
    -webkit-print-color-adjust: exact;
    color-adjust: exact;
  }
}

.line-highlight::before,
.line-highlight[data-end]::after {
  content: attr(data-start);
  position: absolute;
  top: 0.45em;
  left: 0.6em;
  min-width: 1em;
  padding: 0 0.5em;
  background-color: hsla(24, 20%, 50%, 0.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: 0.3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

.line-highlight[data-end]::after {
  content: attr(data-end);
  top: auto;
  bottom: 0.4em;
}

.line-numbers .line-highlight::before,
.line-numbers .line-highlight::after {
  content: none;
}

pre[id].linkable-line-numbers span.line-numbers-rows {
  pointer-events: all;
}

pre[id].linkable-line-numbers span.line-numbers-rows > span::before {
  cursor: pointer;
}

pre[id].linkable-line-numbers span.line-numbers-rows > span:hover::before {
  background-color: rgba(128, 128, 128, 0.2);
}
